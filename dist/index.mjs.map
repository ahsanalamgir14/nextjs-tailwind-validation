{"version":3,"sources":["../src/lib/utils/validation.ts","../src/lib/hooks/useField.ts","../src/lib/components/ValidatedInput.tsx","../src/lib/hooks/useForm.ts","../src/lib/components/ValidatedForm.tsx","../src/lib/components/ErrorMessage.tsx","../src/lib/components/SuccessMessage.tsx","../src/lib/hooks/useValidation.ts","../src/lib/utils/formatters.ts","../src/lib/utils/helpers.ts"],"names":["validateField","value","rules","fieldName","errors","e","numValue","customError","validateForm","values","fieldErrors","validationRules","useField","name","form","_a","touched","dirty","setValue","useCallback","newValue","setTouched","touchedState","validate","reset","error","ValidatedInput","forwardRef","ref","_b","type","label","placeholder","required","disabled","className","errorClassName","successClassName","showError","showSuccess","onValueChange","children","props","__objRest","_c","localValue","setLocalValue","useState","localTouched","setLocalTouched","localErrors","setLocalErrors","field","hasError","hasSuccess","handleChange","validationErrors","handleBlur","handleFocus","inputClasses","errorClasses","successClasses","jsxs","jsx","baseProps","__spreadValues","__spreadProps","index","useForm","options","initialValues","onSubmit","validateOnChange","validateOnBlur","setValues","setErrors","setDirty","isSubmitting","setIsSubmitting","isSubmitted","setIsSubmitted","isValid","validateFieldByName","fieldRules","validateAll","prev","setError","setTouchedField","setDirtyField","dirtyState","submit","validationResult","touchedFields","acc","useEffect","FormContext","createContext","useFormContext","context","useContext","ValidatedForm","formOptions","handleSubmit","formClasses","childrenWithForm","React","child","processedChildren","nestedChild","SubmitButton","loadingText","buttonClasses","ResetButton","ErrorMessage","showIcon","errorMessages","containerClasses","iconClasses","message","SuccessMessage","useValidation","clearErrors","formatPhoneNumber","match","formatCurrency","currency","locale","formatDate","date","dateObj","defaultOptions","formatCreditCard","groups","formatSSN","capitalize","titleCase","txt","truncate","length","suffix","formatFileSize","bytes","k","sizes","i","debounce","func","wait","timeout","args","deepClone","obj","item","clonedObj","key","getNestedValue","path","current","setNestedValue","keys","lastKey","target","generateId","isEmpty","isValidEmail","email","isValidUrl","url","isNumeric","objectToQueryString","queryStringToObject","queryString","params","sleep","ms","resolve"],"mappings":"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","file":"index.mjs","sourcesContent":["import { ValidationRule, ValidationError, ValidationResult } from '../types';\r\n\r\nexport const validateField = (value: any, rules: ValidationRule, fieldName: string): ValidationError[] => {\r\n  const errors: ValidationError[] = [];\r\n\r\n  // Required validation\r\n  if (rules.required && (!value || (typeof value === 'string' && value.trim() === ''))) {\r\n    errors.push({\r\n      field: fieldName,\r\n      message: `${fieldName} is required`,\r\n      type: 'required'\r\n    });\r\n    return errors; // Don't validate other rules if required fails\r\n  }\r\n\r\n  // Skip other validations if value is empty and not required\r\n  if (!value || (typeof value === 'string' && value.trim() === '')) {\r\n    return errors;\r\n  }\r\n\r\n  // Email validation\r\n  if (rules.email && typeof value === 'string') {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(value)) {\r\n      errors.push({\r\n        field: fieldName,\r\n        message: 'Please enter a valid email address',\r\n        type: 'email'\r\n      });\r\n    }\r\n  }\r\n\r\n  // URL validation\r\n  if (rules.url && typeof value === 'string') {\r\n    try {\r\n      new URL(value);\r\n    } catch {\r\n      errors.push({\r\n        field: fieldName,\r\n        message: 'Please enter a valid URL',\r\n        type: 'url'\r\n      });\r\n    }\r\n  }\r\n\r\n  // Numeric validation\r\n  if (rules.numeric && typeof value === 'string') {\r\n    if (!/^\\d+(\\.\\d+)?$/.test(value)) {\r\n      errors.push({\r\n        field: fieldName,\r\n        message: 'Please enter a valid number',\r\n        type: 'numeric'\r\n      });\r\n    }\r\n  }\r\n\r\n  // Length validations\r\n  if (typeof value === 'string') {\r\n    if (rules.minLength && value.length < rules.minLength) {\r\n      errors.push({\r\n        field: fieldName,\r\n        message: `${fieldName} must be at least ${rules.minLength} characters`,\r\n        type: 'minLength'\r\n      });\r\n    }\r\n\r\n    if (rules.maxLength && value.length > rules.maxLength) {\r\n      errors.push({\r\n        field: fieldName,\r\n        message: `${fieldName} must be no more than ${rules.maxLength} characters`,\r\n        type: 'maxLength'\r\n      });\r\n    }\r\n  }\r\n\r\n  // Pattern validation\r\n  if (rules.pattern && typeof value === 'string') {\r\n    const pattern = typeof rules.pattern === 'string' ? new RegExp(rules.pattern) : rules.pattern;\r\n    if (!pattern.test(value)) {\r\n      errors.push({\r\n        field: fieldName,\r\n        message: `${fieldName} format is invalid`,\r\n        type: 'pattern'\r\n      });\r\n    }\r\n  }\r\n\r\n  // Number range validations\r\n  if (typeof value === 'number' || (typeof value === 'string' && !isNaN(Number(value)))) {\r\n    const numValue = typeof value === 'string' ? Number(value) : value;\r\n\r\n    if (rules.min !== undefined && numValue < rules.min) {\r\n      errors.push({\r\n        field: fieldName,\r\n        message: `${fieldName} must be at least ${rules.min}`,\r\n        type: 'min'\r\n      });\r\n    }\r\n\r\n    if (rules.max !== undefined && numValue > rules.max) {\r\n      errors.push({\r\n        field: fieldName,\r\n        message: `${fieldName} must be no more than ${rules.max}`,\r\n        type: 'max'\r\n      });\r\n    }\r\n  }\r\n\r\n  // Custom validation\r\n  if (rules.custom) {\r\n    const customError = rules.custom(value);\r\n    if (customError) {\r\n      errors.push({\r\n        field: fieldName,\r\n        message: customError,\r\n        type: 'custom'\r\n      });\r\n    }\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const validateForm = (\r\n  values: Record<string, any>,\r\n  rules: Record<string, ValidationRule>\r\n): ValidationResult => {\r\n  const errors: ValidationError[] = [];\r\n\r\n  Object.keys(rules).forEach(fieldName => {\r\n    const fieldErrors = validateField(values[fieldName], rules[fieldName], fieldName);\r\n    errors.push(...fieldErrors);\r\n  });\r\n\r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\n// Predefined validation rules\r\nexport const validationRules = {\r\n  email: {\r\n    required: true,\r\n    email: true\r\n  },\r\n  password: {\r\n    required: true,\r\n    minLength: 8,\r\n    pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&])[A-Za-z\\\\d@$!%*?&]'\r\n  },\r\n  phone: {\r\n    pattern: '^[\\\\+]?[1-9][\\\\d]{0,15}$'\r\n  },\r\n  url: {\r\n    url: true\r\n  },\r\n  numeric: {\r\n    numeric: true\r\n  },\r\n  required: {\r\n    required: true\r\n  }\r\n}; ","\"use client\";\r\n\r\nimport { useCallback } from 'react';\r\nimport { UseFormReturn, ValidationRule } from '../types';\r\nimport { validateField } from '../utils/validation';\r\n\r\nexport interface UseFieldOptions {\r\n  name: string;\r\n  validationRules?: ValidationRule;\r\n  form: UseFormReturn;\r\n}\r\n\r\nexport interface UseFieldReturn {\r\n  value: any;\r\n  error: string | null;\r\n  errors: string[];\r\n  touched: boolean;\r\n  dirty: boolean;\r\n  setValue: (value: any) => void;\r\n  setTouched: (touched: boolean) => void;\r\n  validate: () => boolean;\r\n  reset: () => void;\r\n}\r\n\r\nexport const useField = ({ name, validationRules, form }: UseFieldOptions): UseFieldReturn => {\r\n  const value = form.values[name];\r\n  const fieldErrors = form.errors[name] || [];\r\n  const touched = form.touched[name] || false;\r\n  const dirty = form.dirty[name] || false;\r\n\r\n  const setValue = useCallback((newValue: any) => {\r\n    form.setValue(name, newValue);\r\n  }, [form, name]);\r\n\r\n  const setTouched = useCallback((touchedState: boolean) => {\r\n    form.setTouched(name, touchedState);\r\n  }, [form, name]);\r\n\r\n  const validate = useCallback((): boolean => {\r\n    if (!validationRules) return true;\r\n    \r\n    const errors = validateField(value, validationRules, name);\r\n    form.setError(name, errors[0] || null);\r\n    return errors.length === 0;\r\n  }, [validationRules, value, name, form]);\r\n\r\n  const reset = useCallback(() => {\r\n    form.setValue(name, form.values[name]);\r\n    form.setTouched(name, false);\r\n    form.setDirty(name, false);\r\n  }, [form, name]);\r\n\r\n  return {\r\n    value,\r\n    error: fieldErrors[0]?.message || null,\r\n    errors: fieldErrors.map(error => error.message),\r\n    touched,\r\n    dirty,\r\n    setValue,\r\n    setTouched,\r\n    validate,\r\n    reset\r\n  };\r\n}; ","\"use client\";\r\n\r\nimport React, { forwardRef, useState } from 'react';\r\nimport { InputProps, ValidationRule } from '../types';\r\nimport { useField } from '../hooks/useField';\r\nimport { UseFormReturn } from '../types';\r\n\r\nexport interface ValidatedInputProps extends Omit<InputProps, 'validationRules'> {\r\n  form?: UseFormReturn;\r\n  validationRules?: ValidationRule;\r\n  onValueChange?: (value: any) => void;\r\n  children?: React.ReactNode;\r\n}\r\n\r\nexport const ValidatedInput = forwardRef<HTMLInputElement | HTMLTextAreaElement, ValidatedInputProps>(\r\n  ({ \r\n    name, \r\n    type = 'text', \r\n    label, \r\n    placeholder, \r\n    required, \r\n    disabled, \r\n    className = '',\r\n    errorClassName = '',\r\n    successClassName = '',\r\n    validationRules,\r\n    form,\r\n    showError = true,\r\n    showSuccess = true,\r\n    onValueChange,\r\n    children,\r\n    ...props \r\n  }, ref) => {\r\n    const [localValue, setLocalValue] = useState('');\r\n    const [localTouched, setLocalTouched] = useState(false);\r\n    const [localErrors, setLocalErrors] = useState<string[]>([]);\r\n\r\n    // Use form field if form is provided, otherwise use local state\r\n    const field = form ? useField({ name, validationRules, form }) : null;\r\n    \r\n    const value = field?.value ?? localValue;\r\n    const touched = field?.touched ?? localTouched;\r\n    const errors = field?.errors ?? localErrors;\r\n    const hasError = touched && errors.length > 0;\r\n    const hasSuccess = touched && !hasError && value && showSuccess;\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n      const newValue = e.target.value;\r\n      \r\n      if (field) {\r\n        field.setValue(newValue);\r\n      } else {\r\n        setLocalValue(newValue);\r\n        // Simple local validation\r\n        if (validationRules) {\r\n          const validationErrors: string[] = [];\r\n          \r\n          // Required validation\r\n          if (validationRules.required && !newValue.trim()) {\r\n            validationErrors.push(`${name} is required`);\r\n          }\r\n          \r\n          // Email validation\r\n          if (validationRules.email && newValue && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(newValue)) {\r\n            validationErrors.push('Please enter a valid email address');\r\n          }\r\n          \r\n          // URL validation\r\n          if (validationRules.url && newValue) {\r\n            try {\r\n              new URL(newValue);\r\n            } catch {\r\n              validationErrors.push('Please enter a valid URL');\r\n            }\r\n          }\r\n          \r\n          // Length validations\r\n          if (validationRules.minLength && newValue.length < validationRules.minLength) {\r\n            validationErrors.push(`${name} must be at least ${validationRules.minLength} characters`);\r\n          }\r\n          \r\n          if (validationRules.maxLength && newValue.length > validationRules.maxLength) {\r\n            validationErrors.push(`${name} must be no more than ${validationRules.maxLength} characters`);\r\n          }\r\n          \r\n          // Pattern validation\r\n          if (validationRules.pattern && newValue) {\r\n            const pattern = typeof validationRules.pattern === 'string' \r\n              ? new RegExp(validationRules.pattern) \r\n              : validationRules.pattern;\r\n            if (!pattern.test(newValue)) {\r\n              validationErrors.push(`${name} format is invalid`);\r\n            }\r\n          }\r\n          \r\n          setLocalErrors(validationErrors);\r\n        }\r\n      }\r\n      \r\n      onValueChange?.(newValue);\r\n    };\r\n\r\n    const handleBlur = () => {\r\n      if (field) {\r\n        field.setTouched(true);\r\n      } else {\r\n        setLocalTouched(true);\r\n      }\r\n    };\r\n\r\n    const handleFocus = () => {\r\n      if (field) {\r\n        field.setTouched(true);\r\n      } else {\r\n        setLocalTouched(true);\r\n      }\r\n    };\r\n\r\n    // Base classes\r\n    const baseClasses = `\r\n      w-full px-3 py-2 border rounded-md shadow-sm \r\n      focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\r\n      disabled:bg-gray-100 disabled:cursor-not-allowed\r\n      transition-colors duration-200\r\n    `;\r\n\r\n    // Conditional classes\r\n    const inputClasses = `\r\n      ${baseClasses}\r\n      ${hasError \r\n        ? 'border-red-300 focus:ring-red-500 focus:border-red-500' \r\n        : hasSuccess \r\n        ? 'border-green-300 focus:ring-green-500 focus:border-green-500' \r\n        : 'border-gray-300'\r\n      }\r\n      ${className}\r\n    `;\r\n\r\n    const errorClasses = `\r\n      mt-1 text-sm text-red-600\r\n      ${errorClassName}\r\n    `;\r\n\r\n    const successClasses = `\r\n      mt-1 text-sm text-green-600\r\n      ${successClassName}\r\n    `;\r\n\r\n    const labelClasses = `\r\n      block text-sm font-medium text-gray-700 mb-1\r\n      ${required ? 'after:content-[\"*\"] after:ml-0.5 after:text-red-500' : ''}\r\n    `;\r\n\r\n    const renderInput = () => {\r\n      const baseProps = {\r\n        name,\r\n        value,\r\n        placeholder,\r\n        disabled,\r\n        onChange: handleChange,\r\n        onBlur: handleBlur,\r\n        onFocus: handleFocus,\r\n        className: inputClasses,\r\n        ...props\r\n      };\r\n\r\n      if (type === 'textarea') {\r\n        return <textarea {...baseProps} ref={ref as React.Ref<HTMLTextAreaElement>} rows={4} />;\r\n      }\r\n\r\n      return <input {...baseProps} ref={ref as React.Ref<HTMLInputElement>} type={type} />;\r\n    };\r\n\r\n    return (\r\n      <div className=\"w-full\">\r\n        {label && (\r\n          <label htmlFor={name} className={labelClasses}>\r\n            {label}\r\n          </label>\r\n        )}\r\n        \r\n        <div className=\"relative\">\r\n          {renderInput()}\r\n          {children}\r\n        </div>\r\n\r\n        {hasError && showError && (\r\n          <div className={errorClasses}>\r\n            {errors.map((error, index) => (\r\n              <div key={index}>{error}</div>\r\n            ))}\r\n          </div>\r\n        )}\r\n\r\n        {hasSuccess && (\r\n          <div className={successClasses}>\r\n            ✓ Valid\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nValidatedInput.displayName = 'ValidatedInput'; ","\"use client\";\r\n\r\nimport { useState, useCallback, useEffect } from 'react';\r\nimport {\r\n  UseFormOptions,\r\n  UseFormReturn,\r\n  ValidationRule,\r\n  ValidationError,\r\n  ValidationResult\r\n} from '../types';\r\nimport { validateField, validateForm } from '../utils/validation';\r\n\r\nexport const useForm = (options: UseFormOptions): UseFormReturn => {\r\n  const {\r\n    initialValues,\r\n    validationRules = {},\r\n    onSubmit,\r\n    validateOnChange = true,\r\n    validateOnBlur = true\r\n  } = options;\r\n\r\n  const [values, setValues] = useState(initialValues);\r\n  const [errors, setErrors] = useState<Record<string, ValidationError[]>>({});\r\n  const [touched, setTouched] = useState<Record<string, boolean>>({});\r\n  const [dirty, setDirty] = useState<Record<string, boolean>>({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [isSubmitted, setIsSubmitted] = useState(false);\r\n\r\n  // Calculate overall form validity\r\n  const isValid = Object.keys(errors).length === 0 ||\r\n    Object.values(errors).every(fieldErrors => fieldErrors.length === 0);\r\n\r\n  // Validate a single field\r\n  const validateFieldByName = useCallback((name: string): ValidationError[] => {\r\n    const fieldRules = validationRules[name];\r\n    if (!fieldRules) return [];\r\n\r\n    return validateField(values[name], fieldRules, name);\r\n  }, [values, validationRules]);\r\n\r\n  // Validate all fields\r\n  const validateAll = useCallback((): ValidationResult => {\r\n    return validateForm(values, validationRules);\r\n  }, [values, validationRules]);\r\n\r\n  // Set field value\r\n  const setValue = useCallback((name: string, value: any) => {\r\n    setValues(prev => ({ ...prev, [name]: value }));\r\n    setDirty(prev => ({ ...prev, [name]: true }));\r\n\r\n    if (validateOnChange) {\r\n      const fieldErrors = validateFieldByName(name);\r\n      setErrors(prev => ({ ...prev, [name]: fieldErrors }));\r\n    }\r\n  }, [validateOnChange, validateFieldByName]);\r\n\r\n  // Set field error\r\n  const setError = useCallback((name: string, error: ValidationError) => {\r\n    setErrors(prev => ({\r\n      ...prev,\r\n      [name]: [...(prev[name] || []), error]\r\n    }));\r\n  }, []);\r\n\r\n  // Set field touched state\r\n  const setTouchedField = useCallback((name: string, touchedState: boolean) => {\r\n    setTouched(prev => ({ ...prev, [name]: touchedState }));\r\n\r\n    if (validateOnBlur && touchedState) {\r\n      const fieldErrors = validateFieldByName(name);\r\n      setErrors(prev => ({ ...prev, [name]: fieldErrors }));\r\n    }\r\n  }, [validateOnBlur, validateFieldByName]);\r\n\r\n  // Set field dirty state\r\n  const setDirtyField = useCallback((name: string, dirtyState: boolean) => {\r\n    setDirty(prev => ({ ...prev, [name]: dirtyState }));\r\n  }, []);\r\n\r\n  // Validate specific field or all fields\r\n  const validate = useCallback((name?: string): ValidationResult => {\r\n    if (name) {\r\n      const fieldErrors = validateFieldByName(name);\r\n      setErrors(prev => ({ ...prev, [name]: fieldErrors }));\r\n      return {\r\n        isValid: fieldErrors.length === 0,\r\n        errors: fieldErrors\r\n      };\r\n    } else {\r\n      return validateAll();\r\n    }\r\n  }, [validateFieldByName, validateAll]);\r\n\r\n  // Reset form\r\n  const reset = useCallback(() => {\r\n    setValues(initialValues);\r\n    setErrors({});\r\n    setTouched({});\r\n    setDirty({});\r\n    setIsSubmitting(false);\r\n    setIsSubmitted(false);\r\n  }, [initialValues]);\r\n\r\n  // Submit form\r\n  const submit = useCallback(async () => {\r\n    const validationResult = validateAll();\r\n\r\n    if (!validationResult.isValid) {\r\n      // Set all fields as touched to show errors\r\n      const touchedFields: Record<string, boolean> = {};\r\n      Object.keys(validationRules).forEach(field => {\r\n        touchedFields[field] = true;\r\n      });\r\n      setTouched(touchedFields);\r\n      setErrors(validationResult.errors.reduce((acc, error) => {\r\n        if (!acc[error.field]) acc[error.field] = [];\r\n        acc[error.field].push(error);\r\n        return acc;\r\n      }, {} as Record<string, ValidationError[]>));\r\n      return;\r\n    }\r\n\r\n    if (onSubmit) {\r\n      setIsSubmitting(true);\r\n      try {\r\n        await onSubmit(values);\r\n        setIsSubmitted(true);\r\n      } catch (error) {\r\n        console.error('Form submission error:', error);\r\n      } finally {\r\n        setIsSubmitting(false);\r\n      }\r\n    }\r\n  }, [validateAll, validationRules, onSubmit, values]);\r\n\r\n  // Update form when initialValues change\r\n  useEffect(() => {\r\n    setValues(initialValues);\r\n  }, [initialValues]);\r\n\r\n  return {\r\n    values,\r\n    errors,\r\n    touched,\r\n    dirty,\r\n    isValid,\r\n    isSubmitting,\r\n    isSubmitted,\r\n    setValue,\r\n    setError,\r\n    setTouched: setTouchedField,\r\n    setDirty: setDirtyField,\r\n    validate,\r\n    validateAll,\r\n    reset,\r\n    submit\r\n  };\r\n}; ","\"use client\";\r\n\r\nimport React, { createContext, useContext, ReactNode } from 'react';\r\nimport { UseFormOptions, UseFormReturn } from '../types';\r\nimport { useForm } from '../hooks/useForm';\r\nimport { ValidatedInput } from './ValidatedInput';\r\n\r\n// Create form context\r\nconst FormContext = createContext<UseFormReturn | null>(null);\r\n\r\n// Hook to use form context\r\nexport const useFormContext = () => {\r\n  const context = useContext(FormContext);\r\n  if (!context) {\r\n    throw new Error('useFormContext must be used within a ValidatedForm');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport interface ValidatedFormProps extends Omit<UseFormOptions, 'onSubmit'> {\r\n  children: ReactNode;\r\n  className?: string;\r\n  onSubmit?: (e: React.FormEvent) => void;\r\n}\r\n\r\nexport const ValidatedForm: React.FC<ValidatedFormProps> = ({\r\n  children,\r\n  className = '',\r\n  onSubmit,\r\n  ...formOptions\r\n}) => {\r\n  const form = useForm(formOptions);\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (onSubmit) {\r\n      onSubmit(e);\r\n    } else {\r\n      form.submit();\r\n    }\r\n  };\r\n\r\n  const formClasses = `\r\n    space-y-6\r\n    ${className}\r\n  `;\r\n\r\n            // Clone children and inject form prop into ValidatedInput components\r\n          const childrenWithForm = React.Children.map(children, (child) => {\r\n            if (React.isValidElement(child)) {\r\n              // If it's a ValidatedInput, inject the form prop\r\n              if (child.type === ValidatedInput ||\r\n                  (typeof child.type === 'function' && (child.type as any).displayName === 'ValidatedInput')) {\r\n                return React.cloneElement(child, { form } as any);\r\n              }\r\n\r\n              // Recursively process nested children\r\n              if ((child.props as any).children) {\r\n                const processedChildren = React.Children.map((child.props as any).children, (nestedChild) => {\r\n                  if (React.isValidElement(nestedChild)) {\r\n                    if (nestedChild.type === ValidatedInput ||\r\n                        (typeof nestedChild.type === 'function' && (nestedChild.type as any).displayName === 'ValidatedInput')) {\r\n                      return React.cloneElement(nestedChild, { form } as any);\r\n                    }\r\n                  }\r\n                  return nestedChild;\r\n                });\r\n                return React.cloneElement(child, {}, processedChildren);\r\n              }\r\n            }\r\n            return child;\r\n          });\r\n\r\n  return (\r\n    <FormContext.Provider value={form}>\r\n      <form onSubmit={handleSubmit} className={formClasses} noValidate>\r\n        {childrenWithForm}\r\n      </form>\r\n    </FormContext.Provider>\r\n  );\r\n};\r\n\r\n// Form submission button component\r\nexport interface SubmitButtonProps {\r\n  children: ReactNode;\r\n  className?: string;\r\n  disabled?: boolean;\r\n  loadingText?: string;\r\n}\r\n\r\nexport const SubmitButton: React.FC<SubmitButtonProps> = ({\r\n  children,\r\n  className = '',\r\n  disabled,\r\n  loadingText = 'Submitting...'\r\n}) => {\r\n  const form = useFormContext();\r\n  \r\n  const buttonClasses = `\r\n    w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white \r\n    bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\r\n    disabled:bg-gray-400 disabled:cursor-not-allowed\r\n    transition-colors duration-200\r\n    ${className}\r\n  `;\r\n\r\n  return (\r\n    <button\r\n      type=\"submit\"\r\n      disabled={disabled || form.isSubmitting}\r\n      className={buttonClasses}\r\n    >\r\n      {form.isSubmitting ? loadingText : children}\r\n    </button>\r\n  );\r\n};\r\n\r\n// Form reset button component\r\nexport interface ResetButtonProps {\r\n  children: ReactNode;\r\n  className?: string;\r\n  disabled?: boolean;\r\n}\r\n\r\nexport const ResetButton: React.FC<ResetButtonProps> = ({\r\n  children,\r\n  className = '',\r\n  disabled\r\n}) => {\r\n  const form = useFormContext();\r\n  \r\n  const buttonClasses = `\r\n    w-full flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 \r\n    bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\r\n    disabled:bg-gray-100 disabled:cursor-not-allowed\r\n    transition-colors duration-200\r\n    ${className}\r\n  `;\r\n\r\n  const handleReset = () => {\r\n    form.reset();\r\n  };\r\n\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      onClick={handleReset}\r\n      disabled={disabled}\r\n      className={buttonClasses}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n}; ","\"use client\";\r\n\r\nimport React from 'react';\r\n\r\nexport interface ErrorMessageProps {\r\n  error?: string | null;\r\n  errors?: string[];\r\n  className?: string;\r\n  showIcon?: boolean;\r\n}\r\n\r\nexport const ErrorMessage: React.FC<ErrorMessageProps> = ({\r\n  error,\r\n  errors,\r\n  className = '',\r\n  showIcon = true\r\n}) => {\r\n  const errorMessages = errors || (error ? [error] : []);\r\n  \r\n  if (errorMessages.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const containerClasses = `\r\n    mt-1 text-sm text-red-600\r\n    ${className}\r\n  `;\r\n\r\n  const iconClasses = `\r\n    inline-block w-4 h-4 mr-1 text-red-500\r\n  `;\r\n\r\n  return (\r\n    <div className={containerClasses}>\r\n      {errorMessages.map((message, index) => (\r\n        <div key={index} className=\"flex items-start\">\r\n          {showIcon && (\r\n            <svg \r\n              className={iconClasses} \r\n              fill=\"currentColor\" \r\n              viewBox=\"0 0 20 20\"\r\n            >\r\n              <path \r\n                fillRule=\"evenodd\" \r\n                d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" \r\n                clipRule=\"evenodd\" \r\n              />\r\n            </svg>\r\n          )}\r\n          <span>{message}</span>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}; ","\"use client\";\r\n\r\nimport React from 'react';\r\n\r\nexport interface SuccessMessageProps {\r\n  message?: string;\r\n  className?: string;\r\n  showIcon?: boolean;\r\n}\r\n\r\nexport const SuccessMessage: React.FC<SuccessMessageProps> = ({\r\n  message = 'Valid',\r\n  className = '',\r\n  showIcon = true\r\n}) => {\r\n  const containerClasses = `\r\n    mt-1 text-sm text-green-600\r\n    ${className}\r\n  `;\r\n\r\n  const iconClasses = `\r\n    inline-block w-4 h-4 mr-1 text-green-500\r\n  `;\r\n\r\n  return (\r\n    <div className={containerClasses}>\r\n      <div className=\"flex items-start\">\r\n        {showIcon && (\r\n          <svg \r\n            className={iconClasses} \r\n            fill=\"currentColor\" \r\n            viewBox=\"0 0 20 20\"\r\n          >\r\n            <path \r\n              fillRule=\"evenodd\" \r\n              d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" \r\n              clipRule=\"evenodd\" \r\n            />\r\n          </svg>\r\n        )}\r\n        <span>{message}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}; ","\"use client\";\r\n\r\nimport { useState, useCallback } from 'react';\r\nimport { ValidationRule, ValidationError } from '../types';\r\nimport { validateField } from '../utils/validation';\r\n\r\nexport interface UseValidationOptions {\r\n    rules: ValidationRule;\r\n    fieldName?: string;\r\n    validateOnChange?: boolean;\r\n}\r\n\r\nexport interface UseValidationReturn {\r\n    errors: ValidationError[];\r\n    isValid: boolean;\r\n    validate: (value: any) => ValidationError[];\r\n    clearErrors: () => void;\r\n}\r\n\r\nexport const useValidation = (options: UseValidationOptions): UseValidationReturn => {\r\n    const { rules, fieldName = 'field', validateOnChange = true } = options;\r\n    const [errors, setErrors] = useState<ValidationError[]>([]);\r\n\r\n    const validate = useCallback((value: any): ValidationError[] => {\r\n        const validationErrors = validateField(value, rules, fieldName);\r\n\r\n        if (validateOnChange) {\r\n            setErrors(validationErrors);\r\n        }\r\n\r\n        return validationErrors;\r\n    }, [rules, fieldName, validateOnChange]);\r\n\r\n    const clearErrors = useCallback(() => {\r\n        setErrors([]);\r\n    }, []);\r\n\r\n    const isValid = errors.length === 0;\r\n\r\n    return {\r\n        errors,\r\n        isValid,\r\n        validate,\r\n        clearErrors\r\n    };\r\n}; ","// Format phone number\r\nexport const formatPhoneNumber = (value: string): string => {\r\n  const cleaned = value.replace(/\\D/g, '');\r\n  const match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/);\r\n  if (match) {\r\n    return `(${match[1]}) ${match[2]}-${match[3]}`;\r\n  }\r\n  return value;\r\n};\r\n\r\n// Format currency\r\nexport const formatCurrency = (value: number, currency = 'USD', locale = 'en-US'): string => {\r\n  return new Intl.NumberFormat(locale, {\r\n    style: 'currency',\r\n    currency\r\n  }).format(value);\r\n};\r\n\r\n// Format date\r\nexport const formatDate = (date: Date | string, options?: Intl.DateTimeFormatOptions): string => {\r\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\r\n  const defaultOptions: Intl.DateTimeFormatOptions = {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric'\r\n  };\r\n  return new Intl.DateTimeFormat('en-US', options || defaultOptions).format(dateObj);\r\n};\r\n\r\n// Format credit card number\r\nexport const formatCreditCard = (value: string): string => {\r\n  const cleaned = value.replace(/\\D/g, '');\r\n  const groups = cleaned.match(/.{1,4}/g);\r\n  return groups ? groups.join(' ') : value;\r\n};\r\n\r\n// Format social security number\r\nexport const formatSSN = (value: string): string => {\r\n  const cleaned = value.replace(/\\D/g, '');\r\n  const match = cleaned.match(/^(\\d{3})(\\d{2})(\\d{4})$/);\r\n  if (match) {\r\n    return `${match[1]}-${match[2]}-${match[3]}`;\r\n  }\r\n  return value;\r\n};\r\n\r\n// Capitalize first letter\r\nexport const capitalize = (value: string): string => {\r\n  return value.charAt(0).toUpperCase() + value.slice(1).toLowerCase();\r\n};\r\n\r\n// Title case\r\nexport const titleCase = (value: string): string => {\r\n  return value.replace(/\\w\\S*/g, (txt) => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());\r\n};\r\n\r\n// Truncate text\r\nexport const truncate = (value: string, length: number, suffix = '...'): string => {\r\n  if (value.length <= length) return value;\r\n  return value.substring(0, length) + suffix;\r\n};\r\n\r\n// Format file size\r\nexport const formatFileSize = (bytes: number): string => {\r\n  if (bytes === 0) return '0 Bytes';\r\n  const k = 1024;\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n}; ","// Debounce function\r\nexport const debounce = <T extends (...args: any[]) => any>(\r\n  func: T,\r\n  wait: number\r\n): ((...args: Parameters<T>) => void) => {\r\n  let timeout: NodeJS.Timeout;\r\n  return (...args: Parameters<T>) => {\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(() => func(...args), wait);\r\n  };\r\n};\r\n\r\n// Deep clone object\r\nexport const deepClone = <T>(obj: T): T => {\r\n  if (obj === null || typeof obj !== 'object') return obj;\r\n  if (obj instanceof Date) return new Date(obj.getTime()) as T;\r\n  if (obj instanceof Array) return obj.map(item => deepClone(item)) as T;\r\n  if (typeof obj === 'object') {\r\n    const clonedObj = {} as T;\r\n    for (const key in obj) {\r\n      if (obj.hasOwnProperty(key)) {\r\n        clonedObj[key] = deepClone(obj[key]);\r\n      }\r\n    }\r\n    return clonedObj;\r\n  }\r\n  return obj;\r\n};\r\n\r\n// Get nested object value\r\nexport const getNestedValue = (obj: any, path: string): any => {\r\n  return path.split('.').reduce((current, key) => current?.[key], obj);\r\n};\r\n\r\n// Set nested object value\r\nexport const setNestedValue = (obj: any, path: string, value: any): void => {\r\n  const keys = path.split('.');\r\n  const lastKey = keys.pop()!;\r\n  const target = keys.reduce((current, key) => {\r\n    if (!current[key]) current[key] = {};\r\n    return current[key];\r\n  }, obj);\r\n  target[lastKey] = value;\r\n};\r\n\r\n// Generate unique ID\r\nexport const generateId = (): string => {\r\n  return Math.random().toString(36).substr(2, 9);\r\n};\r\n\r\n// Check if value is empty\r\nexport const isEmpty = (value: any): boolean => {\r\n  if (value === null || value === undefined) return true;\r\n  if (typeof value === 'string') return value.trim() === '';\r\n  if (Array.isArray(value)) return value.length === 0;\r\n  if (typeof value === 'object') return Object.keys(value).length === 0;\r\n  return false;\r\n};\r\n\r\n// Check if value is a valid email\r\nexport const isValidEmail = (email: string): boolean => {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n};\r\n\r\n// Check if value is a valid URL\r\nexport const isValidUrl = (url: string): boolean => {\r\n  try {\r\n    new URL(url);\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n\r\n// Check if value is numeric\r\nexport const isNumeric = (value: any): boolean => {\r\n  return !isNaN(parseFloat(value)) && isFinite(value);\r\n};\r\n\r\n// Convert object to query string\r\nexport const objectToQueryString = (obj: Record<string, any>): string => {\r\n  return Object.keys(obj)\r\n    .filter(key => obj[key] !== null && obj[key] !== undefined)\r\n    .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(obj[key])}`)\r\n    .join('&');\r\n};\r\n\r\n// Convert query string to object\r\nexport const queryStringToObject = (queryString: string): Record<string, string> => {\r\n  const params = new URLSearchParams(queryString);\r\n  const obj: Record<string, string> = {};\r\n  params.forEach((value, key) => {\r\n    obj[key] = value;\r\n  });\r\n  return obj;\r\n};\r\n\r\n// Sleep function\r\nexport const sleep = (ms: number): Promise<void> => {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}; "]}